// Generated by CoffeeScript 1.4.0

/*                                                                                                                                                                                                                 
 * Copyright 2011 Dustin Frisch<fooker@lab.sh>
 * 
 * This file is part of box.
 * 
 * box is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * 
 * box is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with box. If not, see <http://www.gnu.org/licenses/>.
*/


(function() {
  var AnswerModel, ErrorModel, Model, TrackingModel,
    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

  ko.bindingHandlers.readonly = {
    update: function(element, valueAccessor) {
      if (ko.utils.unwrapObservable(valueAccessor())) {
        return element.setAttribute("readonly", true);
      } else {
        return element.removeAttribute("readonly");
      }
    }
  };

  TrackingModel = (function() {

    function TrackingModel() {
      var i,
        _this = this;
      this.size = ko.observable(0);
      this.received = ko.observable(0);
      this.state = ko.observable('starting');
      this.progress_id = ((function() {
        var _i, _results;
        _results = [];
        for (i = _i = 1; _i <= 32; i = ++_i) {
          _results.push(Math.floor(Math.random() * 16).toString(16));
        }
        return _results;
      })()).reduce(function(t, s) {
        return t + s;
      });
      this.interval = setInterval((function() {
        return $.ajax({
          'url': "/progress?X-Progress-ID=" + _this.progress_id,
          'dataType': 'json',
          'success': function(data) {
            _this.size(data != null ? data.size : void 0);
            _this.received(data != null ? data.received : void 0);
            return _this.state(data != null ? data.state : void 0);
          }
        });
      }), 1000);
      ko.computed(function() {
        if (_this.state() === 'done' || _this.state() === 'error') {
          return clearInterval(_this.interval);
        }
      });
      this.progress = ko.computed(function() {
        switch (_this.state()) {
          case 'starting':
            return '0%';
          case 'done':
            return '100%';
          case 'error':
            return '0%';
          case 'uploading':
            return "" + (Math.round(_this.received() / _this.size() * 100.0 * 100.0) / 100.0) + "%";
          default:
            return '0%';
        }
      });
      this.state_text = ko.computed(function() {
        switch (_this.state()) {
          case 'starting':
            return 'Warten...';
          case 'done':
            return 'Fertig';
          case 'error':
            return 'Fehler!';
          case 'uploading':
            return _this.progress();
          default:
            return '...';
        }
      });
    }

    return TrackingModel;

  })();

  AnswerModel = (function() {

    function AnswerModel(data) {
      this.id = data.upload_id;
      this.user = data.upload_user;
      this.file = data.upload_file;
      this.size = data.upload_size;
      this.expiration = data.upload_expiration;
      this.url = "https://box.hs-fulda.org/download/" + this.id + "?dl=" + this.file;
    }

    return AnswerModel;

  })();

  ErrorModel = (function() {

    function ErrorModel(data) {
      this.code = data.code;
      this.message = data.message;
    }

    return ErrorModel;

  })();

  Model = (function() {

    function Model() {
      this.reset_upload = __bind(this.reset_upload, this);

      this.start_upload = __bind(this.start_upload, this);

      this.open_file_chooser = __bind(this.open_file_chooser, this);

      var _this = this;
      this.file = ko.observable('');
      this.title = ko.observable('');
      this.description = ko.observable('');
      this.username = ko.observable('');
      this.password = ko.observable('');
      this.terms_accepted = ko.observable(false);
      this.data_valid = ko.computed(function() {
        return _this.file() !== '' && _this.username() !== '' && _this.password() !== '' && _this.terms_accepted();
      });
      this.tracking = ko.observable(null);
      this.answer = ko.observable(null);
      this.error = ko.observable(null);
    }

    Model.prototype.open_file_chooser = function() {
      var file;
      file = document.getElementById("file");
      return file.click();
    };

    Model.prototype.start_upload = function(form) {
      var data,
        _this = this;
      this.tracking(new TrackingModel);
      data = new FormData(form);
      $.ajax({
        'url': "/upload?X-Progress-ID=" + (this.tracking().progress_id),
        'dataType': 'json',
        'type': 'POST',
        'cache': false,
        'processData': false,
        'contentType': false,
        'data': data,
        'beforeSend': function(xhr) {
          var basic;
          basic = Base64.encode("" + (_this.username()) + ":" + (_this.password()));
          return xhr.setRequestHeader('Authorization', "Basic " + basic);
        },
        'success': function(data) {
          var _ref;
          if ((_ref = _this.tracking()) != null) {
            _ref.state('done');
          }
          return _this.answer(new AnswerModel(data));
        },
        'error': function(xhr, status, error) {
          var _ref;
          if ((_ref = _this.tracking()) != null) {
            _ref.state('error');
          }
          return _this.error(new ErrorModel({
            'code': xhr.status,
            'message': error
          }));
        }
      });
      return false;
    };

    Model.prototype.reset_upload = function() {
      this.tracking(null);
      this.answer(null);
      this.error(null);
      return $.ajax({
        'url': '/logout',
        'type': 'POST',
        'cache': false,
        'processData': false,
        'contentType': false,
        'username': 'logout'
      });
    };

    return Model;

  })();

  ko.applyBindings(new Model());

}).call(this);
